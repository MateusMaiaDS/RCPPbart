// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sample_double
double sample_double(Rcpp::NumericVector vec, int n_min_size);
RcppExport SEXP _RCPPbart_sample_double(SEXP vecSEXP, SEXP n_min_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_min_size(n_min_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_double(vec, n_min_size));
    return rcpp_result_gen;
END_RCPP
}
// dhcauchy
double dhcauchy(double x, double location, double sigma);
RcppExport SEXP _RCPPbart_dhcauchy(SEXP xSEXP, SEXP locationSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type location(locationSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(dhcauchy(x, location, sigma));
    return rcpp_result_gen;
END_RCPP
}
// bart
List bart(const Rcpp::NumericMatrix x_train, const Rcpp::NumericVector y, const Rcpp::NumericMatrix x_test, int n_tree, int n_mcmc, int n_burn, int n_min_size, double tau, double mu, double tau_mu, double naive_sigma, double alpha, double beta, double a_tau, double d_tau);
RcppExport SEXP _RCPPbart_bart(SEXP x_trainSEXP, SEXP ySEXP, SEXP x_testSEXP, SEXP n_treeSEXP, SEXP n_mcmcSEXP, SEXP n_burnSEXP, SEXP n_min_sizeSEXP, SEXP tauSEXP, SEXP muSEXP, SEXP tau_muSEXP, SEXP naive_sigmaSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP a_tauSEXP, SEXP d_tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type x_train(x_trainSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type x_test(x_testSEXP);
    Rcpp::traits::input_parameter< int >::type n_tree(n_treeSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< int >::type n_min_size(n_min_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type tau_mu(tau_muSEXP);
    Rcpp::traits::input_parameter< double >::type naive_sigma(naive_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type d_tau(d_tauSEXP);
    rcpp_result_gen = Rcpp::wrap(bart(x_train, y, x_test, n_tree, n_mcmc, n_burn, n_min_size, tau, mu, tau_mu, naive_sigma, alpha, beta, a_tau, d_tau));
    return rcpp_result_gen;
END_RCPP
}
// bolean_test
bool bolean_test(double x, double y);
RcppExport SEXP _RCPPbart_bolean_test(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(bolean_test(x, y));
    return rcpp_result_gen;
END_RCPP
}
// new_vec
NumericVector new_vec(NumericVector old_vec);
RcppExport SEXP _RCPPbart_new_vec(SEXP old_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type old_vec(old_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(new_vec(old_vec));
    return rcpp_result_gen;
END_RCPP
}
// filling_vec
NumericVector filling_vec(NumericVector x);
RcppExport SEXP _RCPPbart_filling_vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(filling_vec(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RCPPbart_sample_double", (DL_FUNC) &_RCPPbart_sample_double, 2},
    {"_RCPPbart_dhcauchy", (DL_FUNC) &_RCPPbart_dhcauchy, 3},
    {"_RCPPbart_bart", (DL_FUNC) &_RCPPbart_bart, 15},
    {"_RCPPbart_bolean_test", (DL_FUNC) &_RCPPbart_bolean_test, 2},
    {"_RCPPbart_new_vec", (DL_FUNC) &_RCPPbart_new_vec, 1},
    {"_RCPPbart_filling_vec", (DL_FUNC) &_RCPPbart_filling_vec, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RCPPbart(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
